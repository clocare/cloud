- name: Create the heat database
  shell: mysql -e "CREATE DATABASE heat;"

# TODO update heat password here
- name: Grant proper access to the heat database
  shell: |
    mysql -e "CREATE USER 'heat'@'localhost' IDENTIFIED BY 'password';"
    mysql -e "GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'localhost';"
    mysql -e "CREATE USER 'heat'@'%' IDENTIFIED BY 'password';"
    mysql -e "GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'%';"
#   https://ma.ttias.be/mysql-8-removes-shorthand-creating-user-permissions/

# TODO update heat password here
- name: Create the heat user
  shell: openstack user create --domain default --password password heat

- name: Add the admin role to the heat user and service project
  shell: openstack role add --project service --user heat admin

- name: Create the heat and heat-cfn service entities
  shell: |
    openstack service create --name heat --description "Orchestration" orchestration
    openstack service create --name heat-cfn --description "Orchestration"  cloudformation

- name: Create the Orchestration service API endpoints
  shell: |
    openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\(tenant_id\)s
    openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\(tenant_id\)s
    openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\(tenant_id\)s
    openstack endpoint create --region RegionOne cloudformation public http://controller:8000/v1
    openstack endpoint create --region RegionOne cloudformation internal http://controller:8000/v1
    openstack endpoint create --region RegionOne cloudformation admin http://controller:8000/v1

- name: Create the heat domain that contains projects and users for stacks
  shell: openstack domain create --description "Stack projects and users" heat

- name: Create the heat_domain_admin user to manage projects and users in the heat domain
  shell: openstack user create --domain heat --password password heat_domain_admin

- name: Add the admin role to the heat_domain_admin user in the heat domain
  shell: openstack role add --domain heat --user-domain heat --user heat_domain_admin admin

- name: Create the heat_stack_owner role
  shell: openstack role create heat_stack_owner

- name: create demo project
  shell: openstack project create --domain heat --description "Demo Project" demo

- name: create demo user
  shell: openstack user create --domain heat --password password demo

- name: Add the heat_stack_owner role to the demo project and user
  shell: openstack role add --project demo --user demo heat_stack_owner

- name: Create the heat_stack_user role
  shell: openstack role create heat_stack_user

- name:  Install the packages
  apt:
    name: [heat-api, heat-api-cfn, heat-engine]
    state: latest

- name: install missing pip packages
  shell: pip3 install python-zunclient python-vitrageclient

- name: Edit the /etc/heat/heat.conf file
  ini_file:
    path: /etc/heat/heat.conf
    owner: heat
    group: heat
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  loop:
    - { section: "database", option: "connection", value: 'mysql+pymysql://heat:password@localhost/heat' }
    - { section: "keystone_authtoken", option: "www_authenticate_uri", value: 'http://controller:5000' }
    - { section: "keystone_authtoken", option: "auth_url", value: 'http://controller:5000' }
    - { section: "keystone_authtoken", option: "memcached_servers", value: 'controller:11211' }
    - { section: "keystone_authtoken", option: "auth_type", value: 'password' }
    - { section: "keystone_authtoken", option: "project_domain_name", value: 'Default' }
    - { section: "keystone_authtoken", option: "user_domain_name", value: 'Default' }
    - { section: "keystone_authtoken", option: "project_name", value: 'service' }
    - { section: "keystone_authtoken", option: "username", value: 'heat' }
    - { section: "keystone_authtoken", option: "password", value: 'password' }
    - { section: "DEFAULT", option: "transport_url", value: 'rabbit://openstack:password@localhost' }
    - { section: "DEFAULT", option: "heat_metadata_server_url", value: 'http://controller:8000' }
    - { section: "DEFAULT", option: "heat_waitcondition_server_url", value: 'http://controller:8000/v1/waitcondition' }
    - { section: "DEFAULT", option: "stack_domain_admin", value: 'heat_domain_admin' }
    - { section: "DEFAULT", option: "stack_domain_admin_password", value: 'password' }
    - { section: "DEFAULT", option: "stack_user_domain_name", value: 'heat' }
    - { section: "trustee", option: "auth_type", value: 'password' }
    - { section: "trustee", option: "auth_url", value: 'http://controller:5000' }
    - { section: "trustee", option: "username", value: 'heat' }
    - { section: "trustee", option: "password", value: 'password' }
    - { section: "trustee", option: "user_domain_name", value: 'Default' }
    - { section: "clients_keystone", option: "auth_uri", value: 'http://controller:5000' }

- name: Populate the Orchestration database
  shell: su -s /bin/sh -c "heat-manage db_sync" heat

- name: Restart the Orchestration services
  service:
    name: "{{ item }}"
    state: restarted
  loop:
    - heat-api
    - heat-api-cfn
    - heat-engine

- name: List service components to verify successful launch and registration of each process
  register: heatreg
  shell: openstack orchestration service list

- name: print previous command output
  debug:
    var: heatreg.stdout_lines